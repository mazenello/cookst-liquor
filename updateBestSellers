const https = require('https');
const bestSellers = require('./bestSellers.js');

// Configuration
const webflowCollectionId = '65cd3b4736e5d976ee58865b'; // Replace with your Webflow collection ID
const webflowApiToken = '07f757facf042b8064a06ecffe8162e5ff1e2cf5373ac4c18aa12b7fe0d56982'; // Replace with your Webflow API token
const barnetApiUrl = 'http://barnetnetwork.com/api/shop/404-97/products?is_best_seller=true';

// Helper function to make HTTP requests
function httpRequest(options, data = null) {
    return new Promise((resolve, reject) => {
        const req = https.request(options, (res) => {
            let responseData = '';
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            res.on('end', () => {
                resolve(responseData ? JSON.parse(responseData) : {});
            });
        });
        req.on('error', (error) => {
            reject(error);
        });
        if (data) {
            req.write(data);
        }
        req.end();
    });
}

// Fetch items from Webflow API
async function fetchWebflowBestSellers() {
    const options = {
        method: 'GET',
        hostname: 'api.webflow.com',
        path: `/v2/collections/${webflowCollectionId}/items`,
        headers: { 'Authorization': `Bearer ${webflowApiToken}`, 'accept-version': '1.0.0' }
    };
    return httpRequest(options);
}

// Compare and update best sellers
async function updateBestSellers() {
    try {
        // const barnetBestSellers = await fetchBarnetBestSellers();
        const webflowBestSellers = await fetchWebflowBestSellers();
        const barnetBestSellers = await bestSellers.getBestSellers();
        const barnetUrls = barnetBestSellers.items.map(item => ({
            image: item.image,
            url: item.url,
            regular_price: item.regular_price,
            manufacturer_name: item.manufacturer_name,
            description: item.description,
            sale_price: item.sale_price
          }));
        console.log(barnetUrls)
        return
        // note to future maz: we got to getting the data refined from barnet, next we need to compare the data in webflow and push changes.
        const webflowUrls = webflowBestSellers.items.map(item => item["product-link"]);

        // Delete items from Webflow that are not in Barnet's list
        for (const item of webflowBestSellers.items) {
            if (!barnetUrls.includes(item["product-link"])) {
                // Delete item logic here
            }
        }

        // Add new items from Barnet to Webflow
        for (const item of barnetBestSellers.items) {
            if (!webflowUrls.includes(item.url)) {
                // Add item logic here
            }
        }

    } catch (error) {
        console.error('An error occurred:', error.message);
    }
}

async function testingShit() {
    try {
        const data = await bestSellers.getBestSellers();
        console.log(data.paginator.items_count);
    } catch(error) {
        console.error('Error:', error);
    }
}

updateBestSellers();